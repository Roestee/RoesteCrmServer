// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RoesteCrmServer.Infrastructure.Context;

#nullable disable

namespace RoesteCrmServer.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("RoesteCrmServer.Domain.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountOwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BillingAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasAnnotation("EmailAddress", true);

                    b.Property<Guid>("IndustryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<Guid?>("ShippingAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("AccountOwnerId");

                    b.HasIndex("AccountTypeId");

                    b.HasIndex("BillingAddressId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("IndustryId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ShippingAddressId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("RoesteCrmServer.Domain.Entities.AccountType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("AccountTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f4c7af49-cfa3-426a-b216-f982a54fad08"),
                            Name = "Müşteri"
                        },
                        new
                        {
                            Id = new Guid("0343dd9e-9b17-4b45-aeeb-65179e4b9c77"),
                            Name = "Analist"
                        },
                        new
                        {
                            Id = new Guid("1df01e17-ff8b-42cc-aaa5-deb9a7b81db1"),
                            Name = "Yarışmacı"
                        },
                        new
                        {
                            Id = new Guid("71ab980e-fb55-4d46-905e-8e2009a699fb"),
                            Name = "Entegratör"
                        },
                        new
                        {
                            Id = new Guid("fd9c080f-5966-441d-906c-8b1fc1a9a541"),
                            Name = "Yatırımcı"
                        },
                        new
                        {
                            Id = new Guid("327b0888-1aff-492e-9eec-cf71efc4ac04"),
                            Name = "Basın"
                        },
                        new
                        {
                            Id = new Guid("9f53efab-617b-4862-b63d-cd37cc25b5e0"),
                            Name = "Bayi"
                        },
                        new
                        {
                            Id = new Guid("58bc6a43-c4a4-45c1-9959-b2867e6f73a6"),
                            Name = "Ortak"
                        },
                        new
                        {
                            Id = new Guid("daba73fa-1a77-4eef-8695-8cce611407ed"),
                            Name = "Diğer"
                        });
                });

            modelBuilder.Entity("RoesteCrmServer.Domain.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("RoesteCrmServer.Domain.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RoesteCrmServer.Domain.Entities.Case", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CaseOriginId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CaseOwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CaseStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PriorityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CaseOriginId");

                    b.HasIndex("CaseOwnerId");

                    b.HasIndex("CaseStatusId");

                    b.HasIndex("ContactId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("PriorityId");

                    b.ToTable("Cases");
                });

            modelBuilder.Entity("RoesteCrmServer.Domain.Entities.CaseOrigin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("CaseOrigins");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5f5f7166-1519-4dd1-93fb-9699548afa4e"),
                            Name = "Email"
                        },
                        new
                        {
                            Id = new Guid("b1e617fd-5c8d-475d-9ad8-146ecd583e80"),
                            Name = "Telefon"
                        },
                        new
                        {
                            Id = new Guid("03c1e2af-e09d-4037-a1c4-1a55b585efa5"),
                            Name = "İnternet"
                        });
                });

            modelBuilder.Entity("RoesteCrmServer.Domain.Entities.CaseStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("CaseStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("407db69f-8736-4245-ae61-4d6cf178b9be"),
                            Name = "Yeni"
                        },
                        new
                        {
                            Id = new Guid("85775ab0-f04a-4474-b4a6-dad1981aa851"),
                            Name = "Hazırlık"
                        },
                        new
                        {
                            Id = new Guid("bb961cb8-ec0e-4108-9012-28abdbe5f755"),
                            Name = "Müşteri Bekleniyor"
                        },
                        new
                        {
                            Id = new Guid("da384904-242f-4734-ace5-98c6542c9605"),
                            Name = "İlerletildi"
                        },
                        new
                        {
                            Id = new Guid("f81b5a50-9d1c-4df4-b764-405614142d08"),
                            Name = "Kapandı"
                        });
                });

            modelBuilder.Entity("RoesteCrmServer.Domain.Entities.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContactOwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasAnnotation("EmailAddress", true);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("LeadSourceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MailingAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("ModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("OtherAddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<Guid>("SalutationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ContactOwnerId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LeadSourceId");

                    b.HasIndex("MailingAddressId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("OtherAddressId");

                    b.HasIndex("SalutationId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("RoesteCrmServer.Domain.Entities.File", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("LeadId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("OpportunityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ContactId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LeadId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("OpportunityId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("RoesteCrmServer.Domain.Entities.ForecastCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("ForecastCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("323db6d2-09ac-40ad-9f79-bc7f504df570"),
                            Name = "Önceliği Düşük"
                        },
                        new
                        {
                            Id = new Guid("debefce3-c1d9-4a91-9512-7fe509de7be2"),
                            Name = "Satışta"
                        },
                        new
                        {
                            Id = new Guid("d153d477-25b3-4f05-82a5-6ccde6cf246b"),
                            Name = "En İyi Durum"
                        },
                        new
                        {
                            Id = new Guid("19f15f6c-4388-4463-9cf7-7b09707b3323"),
                            Name = "Taahhüt Edilmiş"
                        },
                        new
                        {
                            Id = new Guid("f701dd2b-607e-4776-87bb-a65a12bd321a"),
                            Name = "Kapandı"
                        });
                });

            modelBuilder.Entity("RoesteCrmServer.Domain.Entities.Industry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Industries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("221ec7ce-9978-437b-a857-330cf367c937"),
                            Name = "Tarım"
                        },
                        new
                        {
                            Id = new Guid("da0afed8-27bf-4ea3-9754-7098a654744b"),
                            Name = "Tekstil"
                        },
                        new
                        {
                            Id = new Guid("dc551779-24d1-4144-a6f0-d8adcdecd8c8"),
                            Name = "Banka"
                        },
                        new
                        {
                            Id = new Guid("40e16cea-4cbb-44b7-95ec-712e42f007d9"),
                            Name = "Biyoteknoloji"
                        },
                        new
                        {
                            Id = new Guid("725adb4c-80c3-402c-a53d-b6da051da1e2"),
                            Name = "Kimya"
                        },
                        new
                        {
                            Id = new Guid("f6b250e9-e6cb-4b05-bd54-23a98a75fdde"),
                            Name = "İletişim"
                        },
                        new
                        {
                            Id = new Guid("7b752db3-faeb-4e60-a105-f98960fd2f78"),
                            Name = "İnşaat"
                        },
                        new
                        {
                            Id = new Guid("30a0b5bd-b473-4bbc-9583-a56f06cff2b8"),
                            Name = "Danışmanlık"
                        },
                        new
                        {
                            Id = new Guid("fc7b8207-2d85-4553-bfa2-634f45b63836"),
                            Name = "Eğitim"
                        },
                        new
                        {
                            Id = new Guid("d0e4584a-52c6-4fcf-a266-b351c27c051b"),
                            Name = "Elektronik"
                        },
                        new
                        {
                            Id = new Guid("1ed44957-1193-4a1d-a88d-5cf450e094a2"),
                            Name = "Enerji"
                        },
                        new
                        {
                            Id = new Guid("f4b63ee1-bd48-424d-9fea-cf6d503cb9e5"),
                            Name = "Mühendislik"
                        },
                        new
                        {
                            Id = new Guid("454d9ef5-bfbc-4760-91f7-939676637bb6"),
                            Name = "Eğlence"
                        },
                        new
                        {
                            Id = new Guid("6de59c93-2860-46ae-b927-e2c670be6d5c"),
                            Name = "Çevre"
                        },
                        new
                        {
                            Id = new Guid("73a687dc-07ff-4b04-9c99-e81ee7577303"),
                            Name = "Finans"
                        },
                        new
                        {
                            Id = new Guid("a8ed04ed-30e6-4ced-9177-6e5a5826eed2"),
                            Name = "Yiyecek ve İçecek"
                        },
                        new
                        {
                            Id = new Guid("0416ffa5-5735-406a-ac2a-6a2500e955f0"),
                            Name = "Devlet"
                        },
                        new
                        {
                            Id = new Guid("efa3e3b6-b8dd-42d8-8c3e-6cda738f986f"),
                            Name = "Sağlık Hizmeti"
                        },
                        new
                        {
                            Id = new Guid("0ced0969-86d0-474b-856d-cd0fe5f6fef6"),
                            Name = "Hastane"
                        },
                        new
                        {
                            Id = new Guid("88cefdca-a8a4-473a-bd33-7cbe255b9eda"),
                            Name = "Sigorta"
                        },
                        new
                        {
                            Id = new Guid("4f087302-9ae4-47a6-8c90-84b964f6f4cf"),
                            Name = "Üretim"
                        },
                        new
                        {
                            Id = new Guid("4884a883-d21e-4b5b-9d7a-6565881fb5d9"),
                            Name = "Medya"
                        },
                        new
                        {
                            Id = new Guid("1195f7ed-6ef8-4fd8-a3e3-8e188aea13e7"),
                            Name = "Kar Amaçlı Değil"
                        },
                        new
                        {
                            Id = new Guid("99841b4b-e099-4883-94ab-dac567662d34"),
                            Name = "Diğer"
                        },
                        new
                        {
                            Id = new Guid("ba688907-ad67-44dc-b1c2-fb42bffd06e0"),
                            Name = "Nakliye"
                        },
                        new
                        {
                            Id = new Guid("f99e45ba-f038-42b1-97b0-f3f2839e57e5"),
                            Name = "Telekomünikasyon"
                        },
                        new
                        {
                            Id = new Guid("7efa2c60-a3a4-4186-8be0-eb5b8040d8ea"),
                            Name = "Ulaşım"
                        },
                        new
                        {
                            Id = new Guid("b6ae2a5a-e862-4b27-89f4-7a20677dfe96"),
                            Name = "Kamu Kuruluşları"
                        });
                });

            modelBuilder.Entity("RoesteCrmServer.Domain.Entities.Lead", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasAnnotation("EmailAddress", true);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("IndustryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("LeadOwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LeadSourceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LeadStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<Guid>("RatingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SalutationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("AppUserId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("IndustryId");

                    b.HasIndex("LeadOwnerId");

                    b.HasIndex("LeadSourceId");

                    b.HasIndex("LeadStatusId");

                    b.HasIndex("ModifiedByUserId");

                    b.HasIndex("RatingId");

                    b.HasIndex("SalutationId");

                    b.ToTable("Leads");
                });

            modelBuilder.Entity("RoesteCrmServer.Domain.Entities.LeadSource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("LeadSources");

                    b.HasData(
                        new
                        {
                            Id = new Guid("de4fe7e2-4d73-4239-b000-abcdec094317"),
                            Name = "Reklamlar"
                        },
                        new
                        {
                            Id = new Guid("09e745be-365a-477b-a693-02412ce27e4d"),
                            Name = "Çalışan Tavsiyesi"
                        },
                        new
                        {
                            Id = new Guid("53c73dd4-1bbc-4968-8730-fb97a2fe4e16"),
                            Name = "Dışarıdan Tavsiye"
                        },
                        new
                        {
                            Id = new Guid("a0bf09a1-439e-4480-b995-ab530dfdd4a1"),
                            Name = "Pankart"
                        },
                        new
                        {
                            Id = new Guid("585253d2-0181-4d22-9403-f539fdc7d337"),
                            Name = "Sosyal Medya"
                        },
                        new
                        {
                            Id = new Guid("57d11a28-d4f6-49cf-8274-f679e075228f"),
                            Name = "TV"
                        },
                        new
                        {
                            Id = new Guid("d2b0a3c6-1cce-4362-b2ef-97024f158466"),
                            Name = "İnternet"
                        },
                        new
                        {
                            Id = new Guid("3f3c8598-7ea1-433f-b573-711497720c6f"),
                            Name = "Sözlü Olarak"
                        },
                        new
                        {
                            Id = new Guid("fc06f89c-e8ed-4b65-85c8-c1344aff26be"),
                            Name = "Diğer"
                        });
                });

            modelBuilder.Entity("RoesteCrmServer.Domain.Entities.LeadStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("LeadStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a5c1ddf1-a866-46d8-bbf8-486dc33ba4f4"),
                            Name = "Yeni"
                        },
                        new
                        {
                            Id = new Guid("988cc800-ed1a-42bb-bb71-79727e7f35f2"),
                            Name = "İletişime Geçildi"
                        },
                        new
                        {
                            Id = new Guid("14f26733-b151-43c9-ad51-882edd62cce4"),
                            Name = "Süreç İlerliyor"
                        },
                        new
                        {
                            Id = new Guid("d4ed242c-e590-466e-b5fc-309266e42bd7"),
                            Name = "Niteliksiz"
                        },
                        new
                        {
                            Id = new Guid("c70661fa-0bcd-4aee-bc00-a961a1a54d67"),
                            Name = "Dönüştür"
                        });
                });

            modelBuilder.Entity("RoesteCrmServer.Domain.Entities.Opportunity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Amount")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.Property<DateTime>("CloseDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ForecastCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ModifiedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid>("OpportunityOwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Probability")
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("StageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ForecastCategoryId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("OpportunityOwnerId");

                    b.HasIndex("StageId");

                    b.ToTable("Opportunities");
                });

            modelBuilder.Entity("RoesteCrmServer.Domain.Entities.Priority", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Priorities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("72ef0c90-598a-4eb2-a216-d8d9bd6d16f2"),
                            Name = "Yüksek"
                        },
                        new
                        {
                            Id = new Guid("c857d13c-62ac-45c0-af71-3a79eaa602af"),
                            Name = "Orta"
                        },
                        new
                        {
                            Id = new Guid("862bc289-63f7-4295-9603-c4e5f571b4f2"),
                            Name = "Düşük"
                        });
                });

            modelBuilder.Entity("RoesteCrmServer.Domain.Entities.Rating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Ratings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0f36c216-9e3f-42d7-9aca-1a6bd399206f"),
                            Name = "Sıcak"
                        },
                        new
                        {
                            Id = new Guid("c9f075c5-7e91-4736-8c7a-4e7aa263adae"),
                            Name = "Ilık"
                        },
                        new
                        {
                            Id = new Guid("ec5dae9d-1921-41c9-b18c-402fee4fcd40"),
                            Name = "Soğuk"
                        });
                });

            modelBuilder.Entity("RoesteCrmServer.Domain.Entities.Salutation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Salutations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("000a5e40-088c-421c-9154-dfe622997a0f"),
                            Name = "Bay"
                        },
                        new
                        {
                            Id = new Guid("3cd759c3-eba0-4014-a073-000aea330b65"),
                            Name = "Bayan"
                        },
                        new
                        {
                            Id = new Guid("485aafcb-9382-4c40-98ed-2243c06aea91"),
                            Name = "Dr."
                        },
                        new
                        {
                            Id = new Guid("fb980b82-bb7d-4383-9f63-7ef1ff38902e"),
                            Name = "Prof."
                        },
                        new
                        {
                            Id = new Guid("f889b276-18cd-4d7f-a4e8-a7c66573fa3f"),
                            Name = "Müh."
                        });
                });

            modelBuilder.Entity("RoesteCrmServer.Domain.Entities.Stage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Stages");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9a37c9c1-17c4-420f-8637-f90af4af47d4"),
                            Name = "Hazırlık"
                        },
                        new
                        {
                            Id = new Guid("9a06bb49-ea84-4390-93d8-2a4defd877fd"),
                            Name = "Buluşma & Tanışma"
                        },
                        new
                        {
                            Id = new Guid("62ab1a08-9148-4f1f-82be-813f9cc1ee1b"),
                            Name = "Teklif"
                        },
                        new
                        {
                            Id = new Guid("503faa82-196d-4885-a713-d70ef1b8fdae"),
                            Name = "Pazarlık"
                        },
                        new
                        {
                            Id = new Guid("e3301145-1bcf-473e-a38e-fc100c60e41a"),
                            Name = "Kapandı-Kazanıldı"
                        },
                        new
                        {
                            Id = new Guid("bc990331-b3f7-4fee-bfaf-8a07f89e300e"),
                            Name = "Kapandı-Kaybedildi"
                        });
                });

            modelBuilder.Entity("RoesteCrmServer.Domain.Entities.Account", b =>
                {
                    b.HasOne("RoesteCrmServer.Domain.Entities.AppUser", "AccountOwner")
                        .WithMany()
                        .HasForeignKey("AccountOwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RoesteCrmServer.Domain.Entities.AccountType", "AccountType")
                        .WithMany()
                        .HasForeignKey("AccountTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RoesteCrmServer.Domain.Entities.Address", "BillingAddress")
                        .WithMany()
                        .HasForeignKey("BillingAddressId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RoesteCrmServer.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RoesteCrmServer.Domain.Entities.Industry", "Industry")
                        .WithMany()
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RoesteCrmServer.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RoesteCrmServer.Domain.Entities.Address", "ShippingAddress")
                        .WithMany()
                        .HasForeignKey("ShippingAddressId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AccountOwner");

                    b.Navigation("AccountType");

                    b.Navigation("BillingAddress");

                    b.Navigation("CreatedBy");

                    b.Navigation("Industry");

                    b.Navigation("ModifiedBy");

                    b.Navigation("ShippingAddress");
                });

            modelBuilder.Entity("RoesteCrmServer.Domain.Entities.Case", b =>
                {
                    b.HasOne("RoesteCrmServer.Domain.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.HasOne("RoesteCrmServer.Domain.Entities.CaseOrigin", "CaseOrigin")
                        .WithMany()
                        .HasForeignKey("CaseOriginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RoesteCrmServer.Domain.Entities.AppUser", "CaseOwner")
                        .WithMany()
                        .HasForeignKey("CaseOwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RoesteCrmServer.Domain.Entities.CaseStatus", "CaseStatus")
                        .WithMany()
                        .HasForeignKey("CaseStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RoesteCrmServer.Domain.Entities.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.HasOne("RoesteCrmServer.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RoesteCrmServer.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RoesteCrmServer.Domain.Entities.Priority", "Priority")
                        .WithMany()
                        .HasForeignKey("PriorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("CaseOrigin");

                    b.Navigation("CaseOwner");

                    b.Navigation("CaseStatus");

                    b.Navigation("Contact");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Priority");
                });

            modelBuilder.Entity("RoesteCrmServer.Domain.Entities.Contact", b =>
                {
                    b.HasOne("RoesteCrmServer.Domain.Entities.Account", "Account")
                        .WithMany("Contacts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RoesteCrmServer.Domain.Entities.AppUser", "ContactOwner")
                        .WithMany()
                        .HasForeignKey("ContactOwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RoesteCrmServer.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RoesteCrmServer.Domain.Entities.LeadSource", "LeadSource")
                        .WithMany()
                        .HasForeignKey("LeadSourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RoesteCrmServer.Domain.Entities.Address", "MailingAddress")
                        .WithMany()
                        .HasForeignKey("MailingAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RoesteCrmServer.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RoesteCrmServer.Domain.Entities.Address", "OtherAddress")
                        .WithMany()
                        .HasForeignKey("OtherAddressId");

                    b.HasOne("RoesteCrmServer.Domain.Entities.Salutation", "Salutation")
                        .WithMany()
                        .HasForeignKey("SalutationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("ContactOwner");

                    b.Navigation("CreatedBy");

                    b.Navigation("LeadSource");

                    b.Navigation("MailingAddress");

                    b.Navigation("ModifiedBy");

                    b.Navigation("OtherAddress");

                    b.Navigation("Salutation");
                });

            modelBuilder.Entity("RoesteCrmServer.Domain.Entities.File", b =>
                {
                    b.HasOne("RoesteCrmServer.Domain.Entities.Account", "Account")
                        .WithMany("Files")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RoesteCrmServer.Domain.Entities.Contact", "Contact")
                        .WithMany("Files")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RoesteCrmServer.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("RoesteCrmServer.Domain.Entities.Lead", "Lead")
                        .WithMany("Files")
                        .HasForeignKey("LeadId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RoesteCrmServer.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("RoesteCrmServer.Domain.Entities.Opportunity", "Opportunity")
                        .WithMany("Files")
                        .HasForeignKey("OpportunityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Account");

                    b.Navigation("Contact");

                    b.Navigation("CreatedBy");

                    b.Navigation("Lead");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Opportunity");
                });

            modelBuilder.Entity("RoesteCrmServer.Domain.Entities.Lead", b =>
                {
                    b.HasOne("RoesteCrmServer.Domain.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RoesteCrmServer.Domain.Entities.AppUser", null)
                        .WithMany("Leads")
                        .HasForeignKey("AppUserId");

                    b.HasOne("RoesteCrmServer.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RoesteCrmServer.Domain.Entities.Industry", "Industry")
                        .WithMany()
                        .HasForeignKey("IndustryId");

                    b.HasOne("RoesteCrmServer.Domain.Entities.AppUser", "LeadOwner")
                        .WithMany()
                        .HasForeignKey("LeadOwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RoesteCrmServer.Domain.Entities.LeadSource", "LeadSource")
                        .WithMany()
                        .HasForeignKey("LeadSourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RoesteCrmServer.Domain.Entities.LeadStatus", "LeadStatus")
                        .WithMany()
                        .HasForeignKey("LeadStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RoesteCrmServer.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RoesteCrmServer.Domain.Entities.Rating", "Rating")
                        .WithMany()
                        .HasForeignKey("RatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RoesteCrmServer.Domain.Entities.Salutation", "Salutation")
                        .WithMany()
                        .HasForeignKey("SalutationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("CreatedBy");

                    b.Navigation("Industry");

                    b.Navigation("LeadOwner");

                    b.Navigation("LeadSource");

                    b.Navigation("LeadStatus");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Rating");

                    b.Navigation("Salutation");
                });

            modelBuilder.Entity("RoesteCrmServer.Domain.Entities.Opportunity", b =>
                {
                    b.HasOne("RoesteCrmServer.Domain.Entities.Account", "Account")
                        .WithMany("Opportunities")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RoesteCrmServer.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RoesteCrmServer.Domain.Entities.ForecastCategory", "ForecastCategory")
                        .WithMany()
                        .HasForeignKey("ForecastCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RoesteCrmServer.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RoesteCrmServer.Domain.Entities.AppUser", "OpportunityOwner")
                        .WithMany()
                        .HasForeignKey("OpportunityOwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RoesteCrmServer.Domain.Entities.Stage", "Stage")
                        .WithMany()
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("CreatedBy");

                    b.Navigation("ForecastCategory");

                    b.Navigation("ModifiedBy");

                    b.Navigation("OpportunityOwner");

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("RoesteCrmServer.Domain.Entities.Account", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("Files");

                    b.Navigation("Opportunities");
                });

            modelBuilder.Entity("RoesteCrmServer.Domain.Entities.AppUser", b =>
                {
                    b.Navigation("Leads");
                });

            modelBuilder.Entity("RoesteCrmServer.Domain.Entities.Contact", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("RoesteCrmServer.Domain.Entities.Lead", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("RoesteCrmServer.Domain.Entities.Opportunity", b =>
                {
                    b.Navigation("Files");
                });
#pragma warning restore 612, 618
        }
    }
}
